pipeline {
    agent any

    parameters {
        choice(name: 'cloudProvider', choices: ['AWS', 'DigitalOcean'], description: 'Select Cloud Provider')
        string(name: 'username', defaultValue: 'ubuntu', description: 'Username')
        string(name: 'host', defaultValue: '', description: 'Host IP')
        choice(name: 'CREDENTIAL_ID', choices: ['DEMO', 'MINIO', 'PILTICENTRAL', 'PILTISERVICE', 'SAAS', 'JENKINS', 'WEBSITE', 'REDHAT'], description: 'Select SSH private key credential (for AWS)')
        string(name: 'password', defaultValue: 'MonkeyDonkey-123a', description: 'Password (For DigitalOcean)')
        text(name: 'RequestBody', defaultValue: '''{
                      "query": {
                        "bool": {
                          "must": [
                            {
                              "match": {
                                "message": "ERROR"
                              }
                            },
                            {
                              "range": {
                                "@timestamp": {
                                  "gte": "now-10m",
                                  "lte": "now"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }''', description: 'Enter your Logic here')
    }

    stages {
        stage('HTTP GET Request') {
            steps {
                script {
                    def requestBody = params.RequestBody
                    def currentDate = sh(script: "date +%Y.%m.%d", returnStdout: true).trim()
                    def url = "http://206.189.142.19:9200/thingsboard-${currentDate}/_count"

                    def response = sh(script: """
                        curl -X GET \\
                             -u elastic:qwer1234 \\
                             -H "Content-Type: application/json" \\
                             -d '''${requestBody}''' \\
                             ${url}
                    """, returnStdout: true).trim()

                    def count = sh(script: "echo '${response}' | jq .count", returnStdout: true).trim()
                    echo "Count: ${count}"

                    if (count.toInteger() >= 15) {
                        echo "Count is greater than or equal to 15. Preparing to reboot..."
                        env.REBOOT_REQUIRED = true
                    } else {
                        echo "Count is less than 15. ALL OKAY!!"
                        env.REBOOT_REQUIRED = false
                    }
                }
            }
        }

        stage('Download JAR files') {
            when {
                expression { env.REBOOT_REQUIRED == 'true' }
            }
            steps {
                script {
                    sh 'wget https://repo1.maven.org/maven2/com/jcraft/jsch/0.1.55/jsch-0.1.55.jar -O jsch-0.1.55.jar'
                    def jschJarPath = "${env.WORKSPACE}/jsch-0.1.55.jar"
                    sh "export CLASSPATH=${jschJarPath}:${CLASSPATH}"
                }
            }
        }

        stage('Login to Cloud') {
            when {
                expression { env.REBOOT_REQUIRED == 'true' }
            }
            steps {
                script {
                    def sshUsername = params.username
                    def sshHost = params.host
                    def sshPassword = params.password
                    def privateKeyString

                    if (params.cloudProvider == 'AWS') {
                        switch (params.CREDENTIAL_ID) {
                            case 'DEMO':
                                privateKeyString = getPrivateKeyString('aws_demo')
                                break
                            case 'MINIO':
                                privateKeyString = getPrivateKeyString('aws_s3')
                                break
                            case 'PILTICENTRAL':
                                privateKeyString = getPrivateKeyString('aws_pilticentral')
                                break
                            case 'PILTISERVICE':
                                privateKeyString = getPrivateKeyString('aws_piltiservice')
                                break
                            case 'SAAS':
                                privateKeyString = getPrivateKeyString('aws_mumbai')
                                break
                            case 'JENKINS':
                                privateKeyString = getPrivateKeyString('aws_jenkins')
                                break
                            case 'WEBSITE':
                                privateKeyString = getPrivateKeyString('aws_website')
                                break
                            case 'REDHAT':
                                privateKeyString = getPrivateKeyString('redhat')
                                break
                            default:
                                error("Invalid credential selection")
                        }
                        sh "echo '${privateKeyString}' > ssh_key.pem 2>/dev/null"
                        sh "chmod 400 ssh_key.pem"
                        env.SSH_CONNECTION = "ssh -o StrictHostKeyChecking=no -i 'ssh_key.pem' ${sshUsername}@${sshHost}"
                    } else if (params.cloudProvider == 'DigitalOcean') {
                        env.SSH_CONNECTION = "sshpass -p '${sshPassword}' ssh -o StrictHostKeyChecking=no ${sshUsername}@${sshHost}"
                    } else {
                        error "Unsupported cloud provider: ${params.cloudProvider}"
                    }
                }
            }
        }

        stage('ThingsBoard Online Check') {
            steps {
                script {
                    def response = null
                    def timeoutMillis = 10000 // 10 seconds

                    try {
                        response = timeout(time: timeoutMillis, unit: 'MILLISECONDS') {
                            httpRequest(
                                httpMode: 'GET',
                                url: 'https://tb-sit.piltismart.com'
                            )
                        }
                    } catch (Exception e) {
                        error "URL did not load within 10 seconds."
                    }

                    if (response != null && response.status == 200) {
                        echo "HTTP Request code is 200. Stage 1 Done."
                    } else {
                        error "HTTP Request verification failed. Status code: ${response?.status}"
                    }
                }
            }
        }

        stage('ThingsBoard RAM Check') {
            steps {
                script {
                    def availableMemoryPercentage

                    try {
                        def response = httpRequest(
                            httpMode: 'GET',
                            url: 'https://piltiservices.piltismart.com/ram'
                        )
                        def jsonResponse = new groovy.json.JsonSlurper().parseText(response.getContent())

                        availableMemoryPercentage = jsonResponse.AvailableMemory_percentage as Double
                    } catch (Exception e) {
                        echo "Exception occurred while fetching or parsing data: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        emailext body: "Error occurred in PitiSmart RAM Check stage: ${e.message}",
                                 subject: "Pipeline Failed",
                                 to: "jsvivek3@email.com"
                    }

                    try {
                        if (availableMemoryPercentage != null) {
                            echo "Available Memory Percentage: ${availableMemoryPercentage}%"

                            if (availableMemoryPercentage >= 25.0) {
                                echo "Pass: Available Memory Percentage is greater than 25% 'Alright!!'.'Stage 2 Done'"
                            } else {
                                throw new Exception("Fail: Available Memory Percentage is less than 25%")
                            }
                        } else {
                            echo "Failed to retrieve available memory percentage. Skipping further checks."
                        }
                    } catch (Exception e) {
                        echo "Exception occurred while checking available memory percentage: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        emailext body: "Error occurred in PitiSmart RAM Check stage: ${e.message}",
                                 subject: "Pipeline Failed",
                                 to: "jsvivek3@email.com"
                    }
                }
            }
        }

        stage('Thingsboard CPU Check') {
            steps {
                script {
                    try {
                        def response = httpRequest(
                            httpMode: 'GET',
                            url: 'https://piltiservices.piltismart.com/cpu'
                        )
                        def jsonResponse = new groovy.json.JsonSlurper().parseText(response.getContent())

                        def cpuLoad = jsonResponse.CPU_Load as Double

                        echo "CPU Load: ${cpuLoad}"

                        try {
                            if (cpuLoad >= 80.0) {
                                echo "FAIL: CPU Load is greater than or equal to 80%: ${cpuLoad}"
                                currentBuild.result = 'FAILURE'
                                emailext body: "CPU Load is greater than or equal to 80%: ${cpuLoad}",
                                    subject: "Pipeline Failed",
                                    to: "jsvivek3@email.com"
                            } else {
                                echo "PASS: CPU Load is less than 80% acceptable limit 'Alright!!'.'Stage 3 Done'"
                            }
                        } catch (Exception e) {
                            echo "Exception occurred in if-else block: ${e.message}"
                            currentBuild.result = 'FAILURE'
                            emailext body: "Error occurred in if-else block: ${e.message}",
                                subject: "Pipeline Failed",
                                to: "jsvivek3@email.com"
                        }
                    } catch (Exception ex) {
                        echo "Exception occurred: ${ex.message}"
                        currentBuild.result = 'FAILURE'
                        emailext body: "Error occurred in PitiSmart CPU Check stage: ${ex.message}",
                            subject: "Pipeline Failed",
                            to: "jsvivek3@email.com"
                    }
                }
            }
        }

        stage('ThingsBoard Free Space Check') {
            steps {
                script {
                    try {
                        def response = httpRequest(
                            httpMode: 'GET',
                            url: 'https://piltiservices.piltismart.com/freediskspace'
                        )

                        def jsonResponse = new groovy.json.JsonSlurper().parseText(response.getContent())

                        def unallocatedSpacePercentage = jsonResponse.Unallocated_Space_Percentage as Double

                        echo "Unallocated Space: ${unallocatedSpacePercentage}"

                        try {
                            if (unallocatedSpacePercentage < 30.0) {
                                echo "FAIL: Unallocated Space is less than 30%: ${unallocatedSpacePercentage}"
                                currentBuild.result = 'FAILURE'
                                emailext body: "Unallocated space is less than 30%: ${unallocatedSpacePercentage}",
                                    subject: "Pipeline Failed",
                                    to: "jsvivek3@email.com"
                            } else {
                                echo "PASS: Free Space is Greater Than 30% 'Alright!!' .'Stage 4 Done'"
                            }
                        } catch (Exception e) {
                            echo "Exception occurred in if-else block: ${e.message}"
                            currentBuild.result = 'FAILURE'
                            emailext body: "Error occurred in if-else block: ${e.message}",
                                subject: "Pipeline Failed",
                                to: "jsvivek3@email.com"
                        }
                    } catch (Exception ex) {
                        echo "Exception occurred: ${ex.message}"
                        currentBuild.result = 'FAILURE'
                        emailext body: "Error occurred in PitiSmart Free Space Check stage: ${ex.message}",
                            subject: "Pipeline Failed",
                            to: "jsvivek3@email.com"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                if (currentBuild.result == 'FAILURE' || env.REBOOT_REQUIRED == 'true') {
                    echo "Pipeline failed. Rebooting the server..."
                    def sshCommand = env.SSH_CONNECTION ?: error("SSH connection not established")
                    def reboot = "sudo reboot"
                    sh "${sshCommand} '${reboot}'"
                    emailext body: "Pipeline failed. Rebooting the server...",
                                subject: "Pipeline Failed",
                                to: "jsvivek3@gmail.com"
                } else {
                    echo "Pipeline succeeded or reboot is not required."
                    emailext body: "Pipeline Successed !!",
                                subject: "Pipeline Success",
                                to: "jsvivek3@gmail.com"
                }
            }
        }
    }
}

def getPrivateKeyString(credentialId) {
    def credentials = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey.class,
        Jenkins.instance,
        null,
        null
    )

    def credential = credentials.find { it.id == credentialId }
    if (credential) {
        return credential.getPrivateKey()
    } else {
        error("Credential not found for ID: ${credentialId}")
    }
}
