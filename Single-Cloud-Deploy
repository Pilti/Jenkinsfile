pipeline {
    agent any
    
    parameters {
        choice(name: 'cloudProvider', choices: ['AWS', 'DigitalOcean', 'Oracle'], description: 'Select Cloud Provider')
        string(name: 'username', defaultValue: '', description: 'Username')
        string(name: 'host', defaultValue: '', description: 'Host IP')
        string(name: 'credentialId', defaultValue: '', description: 'Credential ID for SSH private key')
        string(name: 'password', defaultValue: '', description: 'Password (For DigitalOcean)')
    }
      environment {
            keyfile = credentials ('AWS_Remote')
        }

    stages {
        stage('Download JAR files') {
            steps {
                script {
                    // Download Jsch library
                    sh 'wget https://repo1.maven.org/maven2/com/jcraft/jsch/0.1.55/jsch-0.1.55.jar -O jsch-0.1.55.jar'
         
                    // Add JSch JAR file to classpath
                    def jschJarPath = "${env.WORKSPACE}/jsch-0.1.55.jar"
                    sh "export CLASSPATH=${jschJarPath}:${CLASSPATH}"
                }
            }
        }
                
         
        stage('Login to Cloud') {
            steps {
                script {
                    def sshHost = params.host
                    def sshUsername = params.username
                   // def credentialId = params.credentialId -o StrictHostKeyChecking=no -i \$KEY_FILE
                    def sshPassword = params.password
                    
                    if (params.cloudProvider == 'AWS' || params.cloudProvider == 'Oracle') {
                        // Use the provided SSH private key credential for SSH authentication
                        withCredentials([sshUserPrivateKey(credentialsId: credentialId, keyFileVariable: 'KEY_FILE')]) {
                            def sshLoginCommand = "ssh  -i ${keyfile} ${sshUsername}@${sshHost}"
                            sh sshLoginCommand
                            env.SSH_CONNECTION = sshLoginCommand
                        }
                    } else if (params.cloudProvider == 'DigitalOcean') {
                        // Use password authentication for DigitalOcean
                        def sshLoginCommand = "sshpass -p '${sshPassword}' ssh ${sshUsername}@${sshHost}"
                        sh sshLoginCommand
                        env.SSH_CONNECTION = sshLoginCommand
                    } else {
                        error "Unsupported cloud provider: ${params.cloudProvider}"
                    }
                }
            }
        }
        
        stage('Install AWS CLI') {
            when {
                expression { params.cloudProvider == 'AWS' || params.cloudProvider == 'Oracle' || params.cloudProvider == 'DigitalOcean'}
            }
            steps {
                script {
                    // Ensure SSH connection details are available
                    def sshCommand = env.SSH_CONNECTION ?: error("SSH connection not established")
                    
                    
                    // Configure AWS CLI
                    def awsConfigureCommand = "aws configure set aws_access_key_id  && " +
                                               "aws configure set aws_secret_access_key  && " +
                                               "aws configure set default.region eu-west-1 "
                                               
                    // Execute AWS CLI installation commands on the same cloud instance
                    def awsInstallCommand = "sudo apt-get update && sudo apt-get install -y apt-transport-https curl unzip && " +
                                            "curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip' && " +
                                            "sudo unzip -o awscliv2.zip && sudo ./aws/install --update && " + "${awsConfigureCommand}"
                    sh "${sshCommand} '${awsInstallCommand}'"
                }
            }
        }
        
        stage('Copy from S3') {
            steps {
                script {
                    // Ensure SSH connection details are available
                    def sshCommand = env.SSH_CONNECTION ?: error("SSH connection not established")
                    
                    // Execute AWS CLI command to copy files from S3 bucket on the same cloud instance
                    def s3Bucket = "piltiservice-binary"
                    def s3Key = "s-0.0.1-SNAPSHOT.jar"
                    //def localDirectory = "/root/spring12.jar"
                     def localDirectory

                    if (params.cloudProvider == 'AWS' || params.cloudProvider == 'Oracle') {
                        localDirectory = "/home/ubuntu/spring12.jar"
                    } else if (params.cloudProvider == 'DigitalOcean') {
                        localDirectory = "/root/spring12.jar"
                    } else {
                        error "Unsupported cloud provider: ${params.cloudProvider}"
                    }

                    // def awsCopyCommand = "aws s3 cp s3://${s3Bucket}/${s3Key} ${localDirectory}"
                    // sh "${sshCommand} '${awsCopyCommand}'"
                    def awsCopyCommand = "aws s3 cp s3://${s3Bucket}/${s3Key} ${localDirectory}"
                    sh "${sshCommand} '${awsCopyCommand}'"
                }
            }
        }
        
        stage('Execute Command') {
            steps {
                script {
                    // Ensure SSH connection details are available
                    def sshCommand = env.SSH_CONNECTION ?: error("SSH connection not established")
                    
                    // Run the JAR file on the same cloud instance
                   // def jarFilePath = "/root/spring12.jar" // Assuming it's already copied
                    
                    // Run the JAR file on the same cloud instance
            def jarFilePath

            if (params.cloudProvider == 'AWS' || params.cloudProvider == 'Oracle') {
                jarFilePath = "/home/ubuntu/spring12.jar"
            } else if (params.cloudProvider == 'DigitalOcean') {
                jarFilePath = "/root/spring12.jar"
            } else {
                error "Unsupported cloud provider: ${params.cloudProvider}"
            }

                    def javaCommand = "nohup java -jar ${jarFilePath} --server.port=8888 > ${jarFilePath}/logfile1.log 2>&1 &"
                    sh "${sshCommand} '${javaCommand}'"
                }
            }
        }
    }

}
