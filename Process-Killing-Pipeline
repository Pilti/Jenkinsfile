pipeline {
    agent any
    
    parameters {
        choice(name: 'cloudProvider', choices: ['AWS', 'DigitalOcean'], description: 'Select Cloud Provider')
        string(name: 'username', defaultValue: '', description: 'Username')
        string(name: 'host', defaultValue: '', description: 'Host IP')
        choice(name: 'CREDENTIAL_ID', choices: ['WEBSITE', 'MINIO', 'PILTICENTRAL', 'PILTISERVICE', 'SAAS', 'JENKINS', 'DEMO'], description: 'Select SSH private key credential')
        string(name: 'password', defaultValue: '', description: 'Password (For DigitalOcean)')
    }
     
    stages {
        stage('Download JAR files') {
            steps {
                script {
                    // Download Jsch library
                    sh 'wget https://repo1.maven.org/maven2/com/jcraft/jsch/0.1.55/jsch-0.1.55.jar -O jsch-0.1.55.jar'
         
                    // Add JSch JAR file to classpath
                    def jschJarPath = "${env.WORKSPACE}/jsch-0.1.55.jar"
                    sh "export CLASSPATH=${jschJarPath}:${CLASSPATH}"
                }
            }
        }
                
        stage('Login to Cloud') {
            steps {
                script {
                    def sshUsername = params.username
                    def sshHost = params.host
                    def sshPassword = params.password
                    def privateKeyString

                    if (params.cloudProvider == 'AWS') {
                        // Retrieve the selected credential based on the parameter
                        switch (params.CREDENTIAL_ID) {
                            case 'WEBSITE':
                                privateKeyString = getPrivateKeyString('aws_website')
                                break
                            case 'MINIO':
                                privateKeyString = getPrivateKeyString('aws_s3')
                                break
                            case 'PILTICENTRAL':
                                privateKeyString = getPrivateKeyString('aws_pilticentral')
                                break
                            case 'PILTISERVICE':
                                privateKeyString = getPrivateKeyString('aws_piltiservice')
                                break
                            case 'SAAS':
                                privateKeyString = getPrivateKeyString('aws_mumbai')
                                break
                            case 'JENKINS':
                                privateKeyString = getPrivateKeyString('aws_jenkins')
                                break
                            case 'DEMO':
                                privateKeyString = getPrivateKeyString('aws_demo')
                                break
                            default:
                                error("Invalid credential selection")
                        }
                        // Use the private key in the SSH command
                        sh "echo '${privateKeyString}' > ssh_key.pem"
                        sh "chmod 400 ssh_key.pem"
                        def sshLoginCommand = "ssh -o StrictHostKeyChecking=no -i 'ssh_key.pem' ${sshUsername}@${sshHost}"
                        env.SSH_CONNECTION = sshLoginCommand
                    } else if (params.cloudProvider == 'DigitalOcean') {
                        // Use password authentication for DigitalOcean
                        def sshLoginCommand = "sshpass -p '${sshPassword}' ssh ${sshUsername}@${sshHost}"
                        env.SSH_CONNECTION = sshLoginCommand
                    } else {
                        error "Unsupported cloud provider: ${params.cloudProvider}"
                    }
                }
            }
        }

        stage('Find and Kill Process') {
            steps {
                script {
                    // Ensure SSH connection details are available
                    def sshCommand = env.SSH_CONNECTION ?: error("SSH connection not established")
                    
                     // Find the PID of the spring.jar process
                    def findPidCommand = "${sshCommand} 'ps -ef | grep \"sudo nohup java -jar /home/ubuntu/spring.jar\" | grep -v grep | awk \"{print \\\$2}\"'"
                    echo "Find PID Command: ${findPidCommand}"
                    def pid = sh(script: findPidCommand, returnStdout: true).trim()
                    
                    // Kill the process using the PID
                    if (pid) {
                        def killCommand = "${sshCommand} 'sudo kill -9 ${pid}'"
                        echo "${killCommand}"
                        sh "${killCommand}"
                    } else {
                        echo "No process found for spring.jar"
                    }
                }
            }
        }
    }
}

def getPrivateKeyString(credentialId) {
    def credentials = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey.class,
        Jenkins.instance,
        null,
        null
    )

    def credential = credentials.find { it.id == credentialId }
    if (credential) {
        return credential.getPrivateKey()
    } else {
        error("Credential not found for ID: ${credentialId}")
    }
}
